V0 Goals
	- Get more Rust practice/knowledge.
	- Write a minimal, single-threaded, 2d physics engine and create a realtime,
		interactive, graphical demo.
	- Simulate an arbitary number of particles.
		+ Forces
		+ Position
		+ Velocity
		+ Fields
	- For the demo, use the library to allow creation of particles and
		application of forces in a running simulation.

Development process (not necessarily in order)
	- Design the library.
		+ Design the interface. [done]
		+ Design the structs.
		 	-> Design the struct methods.
		+ Design the simulation logic (how to keep track of particles, how to ************* TODO: See "Simulation Struct" below. *******************
			apply the effects of fields, etc.).
			-> Make a Simulation struct to store everything that belongs to the
				active simulation.
	- Write structs and skeleton functions/methods based on the interface design.
	- Write failing tests.
		+ Starting to write these while working on the design, based on the
			methods under the "Interface", section, below, might be helpful for
			coming up with more of the design.
	- Implement the library.
	- Write the demo.

Testing
	- The physics engine should be a library with unit (and integration?) tests.
	- Tests:
		+ A useful category of tests might be tests that apply known forces or
			velocities to particles and compare the results to the predictions
			of classical mechanics formulas for position, velocity, kinetic
			energy, etc. Due to the tick-based, discrete nature of the
			simulation, these tests will need to allow for some margin of error,
			based on the tick length and other precision settings.
		+ Test all of the basic building blocks of the library (e.g., the vector
			math structs and methods).

Interface (things to make available to users of the library)
	- Create particles.
		+ fn create_particle(position: Vector2 /* or Position */,
			mass: /* number */, fields: Vec<Field>)
			-> /* particle ID: */ Uuid;
	- Delete particles.
		+ fn delete(particle_id: Uuid);
	- Set particle properties?
		+ Don't allow mass, position, or fields to be modified for existing
			particles. These would all just lead to unnecessary headaches. E.g.,
			what happens to a particle's velocity if its mass changes? Would
			energy be conserved or would velocity stay constant? It may be fun
			to play with in a later version, but isn't worth implementing in v0.
	- Set velocity and acceleration directly?
		+ No. Not worth it for v0. This is meant to be "minimal."
	- Create fields and attach them to particles.
		+ Users of the library will need to be able to write functions that the
			library can call when it's processing field effects. This could
			probably be accomplished by providing a Field trait or using
			function pointers.
	- Remove fields?
		+ No. Not for v0.
	- View existing fields, check for the existence of a field of a given type.
		+ Don't do this for v0. There's probably no need to inspect particles
			like this for a minimal implementation.
	- Apply forces to particles.
		+ apply_force(particle_id: Uuid, force: Vector2 /* or Force */)
	- Start and pause the simulation?
		+ start();
		+ pause();
	- Set simulation parameters (simulation speed, tick length, other precision
		parameters).
		+ Define a Simulation struct to store everything involved in the
			simulation. Set all parameters through a constructor.
		+ Simulation::new(speed: /* number */, tick_length: /* number */)
			-> Simulation;
	- Elapsed ticks
		+ get_tick() -> /* number or Tick */;
			-> Possibly useful to alias a numeric type as Tick. Allows all
				references to Tick to be changed to a different underlying type
				if desired and might make the compiler catch some logic errors.
	- Elapsed time (simulated seconds since start of simulation)
		+ get_time() -> /* number or SimTime */:
			-> Possibly useful to alias a numeric type as SimTime. Allows all
				references to SimTime to be changed to a different underlying
				type if desired and might make the compiler catch some logic
				errors.
	- Read information necessary/useful to render the simulation.
		+ particle position
			-> get_position(particle_id: Uuid) -> Vector2 /* or Position */;
		+ particle mass
			-> get_mass(particle_id: Uuid) -> /* number or Mass */;
				- It's probably a good idea to alias a numeric type as Mass.
					Then, it should be possible to change the underlying type in
					just one place if desired. This also makes the type system
					prevent some types of logic errors.
		+ fields for a given particle (type and diameter)
			-> get_fields(particle_id: Uuid) -> Vec<FieldInfo>;

Simulation Logic
	- Write a method that will run on each tick to update the state of
		everything in the simulation.
		+ fn tick();
		+ Apply field effects.
			-> For each field on each particle, get a list of particles inside
				the field radius (if the field affects other particles),
				including the particle that owns the field (if the field affects
				the owning particle) and call the field's apply_effect() method,
				passing in references to (or particle_ids of?) the affected
				particles.
				- This logic requires O(n^2) function calls, where n is the
					number of particles within the radii of each other's fields.
					In the worst case, n is all of the particles in the
					simulation. This is probably something to attempt to
					optimize in the future (but not for v0).
					-> Determining which particles are within each field,
						before even calling the field effect functions, will
						also be O(n^2) (really O(mn), where m is the number of
						fields and n is the number of particles in the
						simulation).
		+ Apply forces, setting acceleration.
			-> Iterate through all particles, calculating a = (f / m) for each.
			-> a = (sum(f0, f1, f2...)/m)
		+ Apply acceleration, changing velocity.
			-> Iterate through all particles, calculating
				v = v + (a * tick_duration) for each.
			-> Remember to do this for each component of the velocity vector.
		+ Move the particles, as dictated by their velocities.
			-> Multiply each component of the velocity vector by the tick
				duration to get a displacement vector.
			-> Add each component of the displacement vector to each component
				of the position.

Simulation Struct
	- Represents the state of the entire simulation.
	- Provides most (all?) of the methods/logic mentioned in the "Interface"
		section above.
	- Data
		+ tick duration
		+ collection owning all particles
		+ elapsed ticks
		+ elapsed simulated time
		+ TODO: Read/skim the rest of this file and read the code from the ****************************
			trajectory program to come up with what needs to go here.
	- Methods
		+ See "Interface" above. Other Simulation methods may be here, but don't
			duplicate the notes from that section. Don't want to end up with
			confusion over two different sets of method designs.
		+ TODO: Read/skim the rest of this file and read the code from the ****************************
			trajectory program to come up with what needs to go here.

Vector2 Struct (not to be confused with Vec)
	- Stores a 2d vector.
	- Possibly a tuple struct.
	- Provides methods for 2d vector math.
	- May be wrapped by structs used for describing specific vector quantities
		(e.g. Force, Position, Velocity, Acceleration), if useful. Each of these
		vector quantity structs could then implement their own methods that rely
		on Vector2 but perform specific tasks (e.g. apply a force to produce an
		acceleration). Having different structs for different types of vector
		quantity may also be helpful as a way of making the compiler check for
		logic errors arising from applying the wrong kind of vector in a given
		context (e.g., trying to add a force vector to an acceleration vector
		would result in a compiler error instead of a confusing bug).

Particle Struct
	- Tracks (and owns) all information pertaining to an individual particle.
	- Mass
	- Position
	- Velocity
	- Acceleration during the current or next tick?
	- Fields produced by the particle
	- Unique particle ID

Interactions
	- Particles will only interact with each other via fields. There will be no
		explicit collision detection (just bounds checking on fields).
	- Particles are point objects: they have no length, height, or area. Fields
		will have radii.

Fields
	- Each particle can have an arbitrary number of fields attached.
	- A field consists of a radius and an effect.
		+ Any particle, other than the particle to which the field is attached,
			will trigger the field's effect when it is within the field during a
			given tick.
			-> Maybe include two Boolean variables to determine whether the
				field affects the owning particle and whether the field affects
				other particles.
		+ A field's effect is determined by an arbitrary function (maybe a
			method of a Field struct).
			-> Rust does appear to support function pointers, so a field struct
				containing a function pointer may be viable, but it might be
				better (at least for v0) to define different types of field
				struct with specific methods defined at compile time.

Gravity
	- Gravity, if it exists, will be a field.
		+ If I want to make a room/floor with gravity, I can probably lock a
			particle, or a floor made up of multiple particles, in place by
			giving it infinite (or very high) mass. I could add a gravity field
			to that particle or floor.
		+ I could make all (or a subset) of particles experience a gravitational
			force in a set direction if I provide the option for fields to
			affect the particles to which they are attached. Then any particle
			that should be affected by gravity would just have a self-affecting
			gravity field attached.

Ticks
	- Each tick represents some amount of time.
	- For realtime simulation, it will be necessary to perform as close to
		exactly the number of ticks that represent a given amount of time within
		that amount of time as possible. For example, if we were not simulating
		in real time, it would be desirable to simulate as quickly as possible.
		There would be nothing wrong with simulating 10,000 seconds in one
		second of real time. However, if we want to interact with the
		simulation, we want it to simulate as close to 1 second per real time
		second as possible.
	- Include a parameter to adjust maximum simulation speed.
		+ 1 second/second for realtime simulation
		+ Greater than 1 second/second for fast-forward
		+ Less than 1 second for slow motion
		+ Negative or None to simulate as quickly as possible.
			-> Probably use an Option<some_unsigned_type> and use None for max
				speed.

Graphics
	- Research rust graphics/animation/visualization libraries. Simpler is
		better.
	- It might be convenient and fun to try the graphics library out by using it
		to create visuals for the "trajectory_calculator" program.


________________________________________________________________________________

Custom screensaver?
	- There are xscreensaver rust bindings, apparently. I might be able to make
		a custom screensaver that generates and simulates random arrangements of
		particles with random properties and field parameters.

To remember for future iterations:
	- To eliminate floating point errors, do all calculations in integer
		multiples of a "Planck length" or use fixed point numbers. Look into
		using GMP (see bookmarks in browser).
	- Combine particles into larger objects (meshes, rigid bodies) and change
		the simulation scale and precision dynamically when useful (based on
		speed or maybe distance between particles? other factors?).
	- See notes in Joplin and paper notes in the black folder.
	- Optimize the algorithm for finding neighboring particles and applying
		field effects in the "Apply field effects" step described under
		"Simulation Logic", above. As described currently (2025-05-22), it will
		probably be a significant bottleneck. Without any optimization, in
		addition to the n^2 (m * n) function calls each of the m fields may need
		to make, each field will need to iterate through all n particles in the
		simulation to determine whether each of those particles falls within the
		field's radius. This will need to be done for each of the fields in the
		simulation.
